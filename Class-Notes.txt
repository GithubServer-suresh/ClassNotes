SpringBoot & MicroServices
==========================


Pre-Requisites
--------------
Core Java

Adv Java (Jdbc, Servlets, Jsp, JSTL)

Hibernate (ORM)

Spring (Core)


SpringBoot
----------
Spring vs SpringBoot
SpringBoot Advantages
IOC Container
Stereotype annotations
Auto Configuration
Starter POM
Standalone application development using SpringBoot
Introduction to Spring MVC
Spring MVC Architecture
Embedded Servers in SpringBoot
Webapp development using SpringBoot
application.properties file
application.yml file
Boot application deployment in third party server
SpringBoot profiles
SpringBoot Actuators
Exception Handling in SpringBoot
Logging in SpringBoot (SLF4j, Log4j, Logback, MDC)
TheamLeaf in SpringBoot
Apache Kafka


JAX-RS (JAVA API FOR XML RESTFUL SERVICE)

From Spring 3.0v we have support to develop rest application using spring.

Spring with Rest
----------------
SOAP vs REST
Rest Architecture Principles -- Roy Fielding
XML, XSD and JAX-B
JSON, JsonSchema and Jackson
HTTP Methods
HTTP Status Codes & messages
REST API Development
REST Client Development(RestTemplate, WebClient)
Swagger
Asynchronus Communication Services (Reactive Programming)
Exception Handling in REST API (ExceptionMapper)
SOAP UI & POSTMAN
Securying REST API(BasicAuth & OAuth2.0)


SpringData
----------
Introduction to SpringData
Introduction to SpringData Starter POM
DataSource Configuration
CRUDRepository
JpaRepository
Custom Queries execution using @Query annotation
Sorting
Pagination




MicroServices
-------------
What is Monolithic Architecture
What is Load Balancer (Cluster) - LBR
What is MicroService Architecture
Advantages of MicroServices
Service Registry(Netflix server)
Gateway Service (Zuul proxy server)
MicroServices Intercommunication (FiegnClient)
Microservice deployment in Pivotal Cloud Foundry
MicroService deployment in AWS
Ribbon (Load Balancer)
Circuit Breaker (Hystrix)
Docker (Orchestration) | Kubernetes
Microservice application monitoring(JMETER)


Tools
------
Maven
Log4J
Junit & PowerMock
Jenkins (CI & CD)

Duration: 45-60 days
Timings: 9:00 AM - 10:30 AM (Monday-Monday)
No class notes

Facebook Group : TEK Leads
email id : tekleads4u@gmail.com or ashok@nareshit.com


3 expereience (Boot & MicroService)


Service based company - Accenture, Deloitte, TCS, Infy, TechM..
--------------------------------------------------------------
years of experience * 3 lakhs

3*3=9 lakhs

Product based company- Oracle, DeShaw, Pramati, JpMorgan etcc
-----------------------------------------------------
years of experience * 4 lakhs

3 * 4 = 12 lakhs

Note: DS, Algos, DP, System Design are very imp
	(www.geeksforgeeks.com)




Spring
------
It is an opensource application development framework
Pivotal team
Latest version of spring is 5.x (Reactive Programming-webflux)


Spring is mainely using to develop below 3 types of applications
-----------------------------------------------------
Web applications (C 2 B)
Distributed applications (B 2 B)
MicroService applications (B 2 B)


Spring Core
Spring AOP
Spring MVC & Spring Rest
Spring Data

SpringBoot
--------------------
Spring is framework

SpringBoot is an approach to develop spring applications with minimal or less configuration.

Spring Boot Provided Starter Pom (Simplifying maven dependencies)

Spring Boot Provided Http Embedded Servers (Tomcat , Jetty, netty)

SpringBoot works based on Opinionated Configuration

SpringBoot supports Auto Configuration

SpringBoot supports Profiles (env specific configuration)

SpringBoot supports Actuators (Production Ready Features)

SpringBoot = Spring + Embedded Servers - xml or annotation config

Dis-Advantages of SpringBoot
----------------------------
Migrating spring project to spring boot will be very difficult

It is recommended for scratch development project

Un-necessary dependencies will be downloaded from starter pom. Manually we need to exclude them.

Creating SpringBoot Application
-------------------------------
1) Spring Starter Wizard in STS IDE

2) Spring initializer website ( start.spring.io )

3) CLI

4) Maven project


pom.xml
-------
spring-boot-starter-parent (version number) -- 2.2.0

spring-boot-starter (packaging type is jar)- standalone

spring-boot-starter-test --- unit testing (junit)


Note : If we are not using any dependency then it is recommended to exclude that from build path.

Note: Project specific dependencies we should add manually in pom.xml file.

ex : jdbc-driver, lombok, kaptcha etc.....

------------------------------------
Main class in springboot application
------------------------------------
package com.example.demo;

@SpringBootApplication
public class SpringBootApp1Application{

     public static void main(String... args){
	 SpringApplication.run								(SpringBootApp1Application.class,args);
     }
}
-----------------------------------------------------------

spring-boot-starter (standalone) 

spring-boot-starter-web  (web)

spring-boot-starter-webflux (reactive)







18-10-2019
-----------
-> Spring Starter Wizard in STS

-> Create project from start.spring.io website
	-> download project zip file
	-> import project into IDE

pom.xml
-------
-> spring-boot-starter-parent
-> spring-boot-starter (standalone) - packaging - jar
-> spring-boot-starter-test

main class
----------

package com.nit;

@SpringBootApplication
public class SpringBootApplication{
	public static void main(String... args){
		SpringApplication.run(Class, args);
	}
}

com.nit.service
com.nit.controller
com.nit.dao
com.util.nit

-> Starts StopWatch

-> Which is profile is activated (to load properties)

-> Type of application (web | reactive | default)
	
-> Starts IOC Container

-> ClassPath Scan (to identify spring beans)

-> Bean Objects creation & dependency injection

-> Calculate time taken to start application and print it

-> Return IOC Container reference


properties file
---------------
application.properties or application.yml






presentation


web layer ==> (com.ibm.dbs.admin.controller)
business layer ==> (com.ibm.dbs.admin.service)
persistence layer ==> (com.ibm.dbs.admin.repository)

base package ===== > com.ibm.dbs



21-Oct-19
------------

Stereotype annotations
----------------------
@Component
@Service
@Repository

@Controller (C 2 B)-- Spring 3.0 
@RestController  (B 2 B) -- Spring 4.0

@Configuration

@Bean (Method level)





22-Oct-19
---------
Beans Colloboration
-------------------

SI : Injecting dependent object into target object by calling target class exposed setter method.

public class ContactController{
	
	private ContactService contactService;

	public void setContactService(Contactservice cs){
		this.contactService  = cs;
	}

	//methods

}

<bean id="controller" class="pkg.ContactController">
    <property name="contactService" ref="cs"/>
</bean>
----------------------------------------------------------------

CI: Injecting dependent bean into target objan ect by calling target bean constructor.

public class ContactController{
	
	private ContactService contactService;

	public ContactController(ContactService cs){
		this.contactService = cs;
	}

	//methods

}
<bean id="controller" class="pkg.ContactController">
    <constructor-arg name="contactService" ref="cs"/>
</bean>
----------------------------------------------------------------

@Autowired
----------

byName
byType
constructor (internally byType mode will be used)


When we use this Annotation, internally spring uses AutowiredAnnotationBeanPostProcessor.


This annotation we can use at below 3 levels

1) field

2) setter method

3) constructor (if we have only one parameterized constructor with beans as parameters @Autowired is optional)


@Controller
public class ContactController{
		
	@Autowired
	private ContactService contactService;

}


@Primary : 
----------
If we have multiple beans qualified for Autowiring then to choose one bean we can use @Primary annotation. 

The bean which contains @Primary will be considered for Autowiring.

@Qualifier :
------------
If we want to inject dependent object based on name of the bean then we can use @Qualifier annotation.

Note: We can use @Primary & @Qualifier only in Autowiring in situation.


public String toString(){

return  
this.getClass().getName()+"@"+Integer.toHexString(this.hashCode());
	
}





SpringApplication.run(..)
@SpringBootApplication
How IOC will start in SpringBoot
ComponentScan
Stereotype annotation
Base Package Naming Convention
Bean Colloboration (Autowiring)



24-Oct-2019
------------
SpringBoot Web Application Creation
-----------------------------------

spring-boot-starter-web
	 - Spring MVC 
	 - Restful App
	 - Embedded Tomcat Container

Note: When we run this SB web application it Starts IOC container by using WebApplicationContext.

It tries to start Tomcat Server with 8080 as port number.

Note: We can change Embedded Server Port Number in 

application.properties
-----------------------
server.port=9090

application.yml
---------------
server: 
 port: 9090


YAML : Yet Another Markup Language

Note: Indent spaces plays very important in yml file

In SpringBoot web application context-path is empty by default.

Note: We can specifiy context-path in properties file or yml file

application.properties
-----------------------
server.servlet.context-path=/App


application.yml
---------------
server: 
  servlet: 
     context-path: /App


With Context-Path : http://localhost:7070/App/welcome
Without Context-Path : http://localhost:7070/welcome

Note: 
-----
Context Path should start with '/' and should not end with '/'

If we have spring-boot-starter-web then by default we will get 
Embedded Tomcat container.

If we don't want to use Embedded Tomcat container we should remove that from build path.

To remove dependency in maven we can use exclusions option


Making Jetty Serve as default embedded server
---------------------------------------------
1) Exclude starter-tomcat from spring-boot-starter-web

2) Add Jetty starter dependency in pom.xml


Deploying SpringBoot Webapplication in External Tomcat server
-------------------------------------------------------------
1) Specify embedded server scope as 'provided' in pom.xml
2) Add <start-class> in <properties /> section of pom.xml

RestAPI
-------
1) SOAP vs REST
2) Rest Architecture Principles
3) RestController
4) Http Annotations 	
	 - @GetMapping
 	 - @PostMapping
	 - @PutMapping
         - @DeleteMapping
5) @RequestBody & @ResponseBody
6) @RequestParam & @PathParam
7) Consumes
8) Produces
9) Content-Type & Accept headers
10) POSTMAN
11) Basic Authentication
12) XML & JAX-B
13) JSON & Jackson
14) Swagger
15) Exception Handling
16) Rest Client Development (RestTemplate & WebClient)


SOAP Webservices
----------------
Provider : Application which is providing services

Consumer : Application which is accessing services

WSDL : Webservice description language (xml)

SOAP : Simple Object Access Protocol (xml)

SOAP UI : Provider functionality testing tool


Note: Webservices is the first technology which supported for Distributed application development with Intereoperability.

Roy fielding identified some loop holes available in SOAP Based Services. They are below
----------------------------------------------------------------
1) Always we should exchange data in soap xml format only
	(Real intereoperability is not available)

2) Everybody can't access soap webservices
     (Real adoptability is not available)


To avoid problems with SOAP development Roy Fielding Provided Rest Architecture principles

1) Unique Addressbility

2) Uniform Constraint Interfaces

3) Message Oriented Representation

4) Communication Stateless

5) HATEOS


JAX-RS API (java api for xml - Restful services)

	- Jersey (Sun)
	- Rest Easy (Jboss)

Spring also supporting for Restful services development from Spring 3.0 version onwards.

	
3.0 =====> @Controller + @ResponseBody

4.0 ===> @RestController


Unique Addressability
--------------------
Every distributed component should bind to unique address.

Note: Class level & method level address mapping.


Uniform Constraint interfaces
-----------------------------
To achieve easy adoptability we should bind our rest controller method to HTTP methods

GET method ----> @GetMapping

POST method ---> @PostMapping

PUT method ----> @PutMapping

DELETE method ---> @DeleteMapping

Message Oriented Representation
--------------------------------
Rest api supports for multiple data formats

Ex: xml, json, yml, text, html etc....


Communication Stateless
-----------------------
In Rest api communication, every client request will be considered as new request. Nothing will be stored at server.


HATEOS
------
Hypermedia as an engine for application state





















